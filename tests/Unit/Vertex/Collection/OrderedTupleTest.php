<?php
namespace Ing200086\GraphCore\Tests\Unit\Vertex\Collection;

use Ing200086\GraphCore\Exception\InvalidArgumentException;
use Ing200086\GraphCore\Tests\Unit\TestCase;
use Ing200086\GraphCore\Vertex\Collection\OrderedTuple;
use Ing200086\GraphCore\Vertex\UnregisteredInterface;
use Mockery;

/**
 * Class OrderedTupleTest
 *
 * @package Ing200086\GraphCore\Tests\Unit\Vertex\Collection
 *
 */
class OrderedTupleTest extends TestCase {
    protected $vertex;
    protected $otherVertex;
    protected $tuple;

    /** @test */
    public function it_can_return_individual_items()
    {
        $this->assertEquals($this->vertex, $this->tuple->getItem());
        $this->assertEquals($this->vertex, $this->tuple->getItem(0));
        $this->assertEquals($this->otherVertex, $this->tuple->getItem(1));
    }

    /** @test */
    public function it_can_return_reversed_tuple()
    {
        $this->tuple = $this->tuple->reversed();
        $this->assertEquals($this->otherVertex, $this->tuple->getItem());
        $this->assertEquals($this->otherVertex, $this->tuple->getItem(0));
        $this->assertEquals($this->vertex, $this->tuple->getItem(1));
    }

    /** @test */
    public function it_can_be_created()
    {
        $this->assertInstanceOf(OrderedTuple::class, $this->tuple);
    }

    /** @test */
    public function it_can_be_created_from_array_of_two_items()
    {
        $this->tuple = OrderedTuple::FromArray([$this->vertex, $this->otherVertex]);
        $this->assertInstanceOf(OrderedTuple::class, $this->tuple);
    }

    public function invalidTupleArrayData()
    {
        return [
            [[]],
            [[1, 2, 3]]
        ];
    }

    /** @test
     * @expectedException InvalidArgumentException
     * @dataProvider invalidTupleArrayData
     */
    public function it_throws_InvalidArgumentException_if_attempting_to_create_with_more_than_two_items($data)
    {
        $tuple = OrderedTuple::FromArray($data);
    }

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->vertex = Mockery::mock(UnregisteredInterface::class);
        $this->otherVertex = Mockery::mock(UnregisteredInterface::class);
        $this->tuple = OrderedTuple::Create($this->vertex, $this->otherVertex);
    }
}
