<?php
/**
 * Created by PhpStorm.
 * User: daniel
 * Date: 9/11/18
 * Time: 6:39 AM
 */
namespace Ing200086\GraphCore\Tests\Unit\ Container\Entity;

use Ing200086\GraphCore\Container\Entity\EntityContainer;
use Ing200086\GraphCore\Container\Entity\InterfaceEntity;
use PHPUnit\Framework\TestCase;
use Mockery;

/**
 * Class EntityContainerTest
 *
 * @package Ing200086\GraphCore\Tests\Unit\ Container\Entity
 *
 */
class EntityContainerClosedOperationsTest extends TestCase {
    protected $_container;
    protected $_entities;
    protected $_entity;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->_entities = $this->mockEntities(26);
        $this->_entity = $this->_entities[0];

        $this->_container = EntityContainer::FromArray($this->_entities);
    }

    protected function mockEntities(int $count)
    {
        $result = [];

        for ($i = 0; $i < $count; $i++)
        {
            $result[] = $this->mockEntity(chr($i+65), $i+123);
        }

        return $result;
    }

    protected function mockEntity(string $id, int $value)
    {
        $entity = Mockery::mock(InterfaceEntity::class);
        $entity->shouldReceive('getId')->andReturn($id);
        $entity->shouldReceive('getValue')->andReturn($value);

        return $entity;
    }

    /** @test*/
    public function it_can_return_container_size() {
        $this->assertEquals(26, $this->_container->size());
    }

    /** @test */
    public function it_can_return_if_it_has_entity_with_id()
    {
        $this->assertTrue($this->_container->has($this->_entity->getId()));
    }

    /** @test*/
    public function it_can_return_entity_with_id() {
        $this->assertEquals($this->_entity, $this->_container->get($this->_entity->getId()), 'Container could not return equal entity');
        $this->assertSame($this->_entity, $this->_container->get($this->_entity->getId()), 'Container could not return same entity');
    }

    /** @test*/
    public function it_can_return_if_it_has_entity_matching() {
        $closure = function($item)
        {
            return ($item->getValue() == 123);
        };

        $this->assertTrue($this->_container->hasThatMatches($closure));
    }

    /** @test
     */
    public function it_can_return_a_subset_of_container_based_on_match() {
        $matcher = function($item)
        {
            $matchers = ['A', 'E', 'I', 'O', 'U', 'Y'];

            return in_array($item->getId(), $matchers);
        };

        $result = $this->_container->getThatMatches($matcher);

        $this->assertEquals(6, $result->size());
        $this->assertInstanceOf(EntityContainer::class, $result);
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        Mockery::close();
    }
}
